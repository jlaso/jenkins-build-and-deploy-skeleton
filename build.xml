<?xml version="1.0" encoding="UTF-8"?>
<project name="demo" default="build">

    <!-- By default, we assume all tools to be on the $PATH -->
    <property name="pdepend" value="pdepend"/>
    <property name="phpcpd" value="phpcpd"/>
    <property name="phpcs" value="phpcs"/>
    <property name="phpdox" value="phpdox"/>
    <property name="phploc" value="phploc"/>
    <property name="phpmd" value="phpmd"/>
    <property name="phpunit" value="phpunit"/>
    <property name="console" value="app/console"/>

    <!-- folders' definition -->
    <property name="sourcedir" value="${basedir}/app" />
    <property name="publicdir" value="${basedir}/public" />
    <property name="configdir" value="${basedir}/app/config" />
    <property name="cachedir" value="${basedir}/app/cache" />
    <property name="testsdir" value="${basedir}/tests" />
    <property name="builddir" value="${basedir}/app/build" />

    <target name="build"
            depends="prepare,vendors,createcache,createconfig,cleancache,phpunit,phpdox,-check-failure"
            description="Installs and builds application"/>

    <target name="full-build"
            depends="prepare,static-analysis,phpunit,phpdox,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
            depends="prepare,lint,phpunit-no-coverage"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis"/>

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="lint"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="vendors"
            unless="vendors.done"
            depends="prepare"
            description="Update vendors">
        <exec executable="composer" failonerror="true">
            <arg value="install"/>
            <arg value="--prefer-dist"/>
            <arg value="--no-ansi"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
            <arg value="--optimize-autoloader"/>
        </exec>
        <property name="vendors.done" value="true"/>
    </target>

    <target name="createcache"
            unless="createcache.done"
            description="Create cache folder">
        <mkdir dir="${cachedir}"/>
        <property name="createcache.done" value="true"/>
    </target>

    <target name="createconfig"
            unless="createconfig.done"
            description="Create config file">
        <copy file="${configdir}/config.yml.sample" overwrite="false"
              tofile="${configdir}/config.yml"/>
        <property name="createconfig.done" value="true"/>
    </target>

    <target name="cleancache" description="Clean cache test env">
        <exec executable="php" failonerror="true">
            <arg value="${console}"/>
            <arg value="clean:cache"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l"/>

            <fileset dir="${sourcedir}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${testsdir}">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${sourcedir}"/>
            <arg path="${publicdir}"/>
            <arg path="${testsdir}"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${builddir}/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${builddir}/logs/phploc.xml"/>
            <arg path="${sourcedir}"/>
            <arg path="${testsdir}"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg"/>
            <arg path="${sourcedir}"/>
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${sourcedir}"/>
            <arg value="text"/>
            <arg path="${builddir}/phpmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${sourcedir}"/>
            <arg value="xml"/>
            <arg path="${builddir}/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${builddir}/logs/pmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${sourcedir}"/>
            <arg path="${testsdir}"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${builddir}/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${sourcedir}"/>
            <arg path="${testsdir}"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${sourcedir}"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${builddir}/logs/pmd-cpd.xml"/>
            <arg path="${sourcedir}"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${builddir}/phpunit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${builddir}/phpunit.xml"/>
            <arg value="--no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpdox"
            unless="phpdox.done"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDox">
        <exec executable="${phpdox}" dir="${builddir}" taskname="phpdox"/>

        <property name="phpdox.done" value="true"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>


</project>